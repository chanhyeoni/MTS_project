library(h2o)
localH2O = h2o.init(ip = "localhost", port = 54321, startH2O = TRUE)
h2o.checkClient(localH2O)
checkClient(localH2O)
irisPath = system.file("extdata", "iris.csv", package="h2o")
iris.hex = h2o.importFile(localH2O, path = irisPath, key = "iris.hex")
summary(iris.hex)
myPath = system.file("extdata", "prostate_folder", package = "h2o")
prostate_all.hex = h2o.importFolder(localH2O, path = myPath)
class(prostate_all.hex)
summary(prostate_all.hex)
prostate_all.fv = h2o.importFolder(localH2O, path = myPath, version = 2)
prostate.hex
prostPath
prostate_all.hex
h2o.installDepPkgs()
h2o.installDepPkgs()
class(prostate_all.hex)
head(h2o.table(prostate.hex[,3]))
prostate.hex = h2o.importURL(localH2O, path = paste("https://raw.github.com",
"0xdata/h2o/master/smalldata/logreg/prostate.csv", sep = "/"), key = "prostate.hex")
class(prostate.hex)
summary(prostate.hex)
head(h2o.table(prostate.hex[,3]))
prosPath = system.file("extdata", "prostate.csv", package="h2o")
prostate.hex = h2o.importFile(localH2O, path = prosPath, key = "prostate.hex")
s = h2o.runif(prostate.hex)
summary(s)
prostate.train = prostate.hex[s <= 0.8,]
prostate.train = h2o.assign(prostate.train, "prostate.train")
prostate.test = prostate.hex[s > 0.8,]
prostate.test = h2o.assign(prostate.test, "prostate.test")
nrow(prostate.train) + nrow(prostate.test)
h2o.gbm(y = dependent, x = independent, data = australia.hex,
n.trees = 10, interaction.depth = 3,
n.minobsinnode = 2, shrinkage = 0.2, distribution= "gaussian")
ausPath = system.file("extdata", "australia.csv", package="h2o")
# import the file
australia.hex = h2o.importFile(localH2O, path = ausPath)
independent <- c("premax", "salmax","minairtemp", "maxairtemp",
"maxsst", "maxsoilmoist", "Max_czcs")
dependent <- "runoffnew"
h2o.gbm(y = dependent, x = independent, data = australia.hex,
n.trees = 10, interaction.depth = 3,
n.minobsinnode = 2, shrinkage = 0.2, distribution= "gaussian")
prostate.hex = h2o.importURL.VA(localH2O, path =
"https://raw.github.com/0xdata/h2o/master/smalldata/logreg/prostate.csv",
key = "prostate.hex")
h2o.glm(y = "CAPSULE", x = c("AGE","RACE","PSA","DCAPS"), data =
prostate.hex, family = "binomial", nfolds = 10, alpha = 0.5)
prostate.hex
summary(prostate.hex)
str(prostate.hex)
prostate.fit = h2o.predict(object = prostate.glm, newdata = prostate.hex)
prostate.glm = h2o.glm(y = "CAPSULE", x = c("AGE","RACE","PSA","DCAPS"), data =
prostate.hex, family = "binomial", nfolds = 10, alpha = 0.5)
prostate.fit = h2o.predict(object = prostate.glm, newdata = prostate.hex)
summary(prostate.fit)
covPath = system.file("extdata", "covtype.csv", package="h2o")
covtype.hex = h2o.importFile(localH2O, path = covPath)
covPath = system.file("extdata", "covtype.csv", package="h2o")
covtype.hex = h2o.importFile(localH2O, path = covPath)
covtype.hex = h2o.importFile(localH2O, path = covPath)
str(prostate.hex)
prostate.hex[s == 0.8]
str(prostate.hex[s == 0.8])
colnames(prostate.hex)
rownames(prostate.hex)
disp(prostate.hex)
print(prostate.hex)
?system.file
?h2o.glm
?system.file
?importFile
?h2o.importFile
?system.file
?h2o.blm
?h2o.glm
?k2o.kmeans
?h2o.kmeans
prosPath = system.file("extdata", "prostate.csv", package= "h2o")
prostate.hex = h2o.importFile(localH2O, path = prosPath)
str(prostate.hex)
kmeansModel = h2o.kmeans(data = prostate.hex, centers = 8)
print(kmeansModel)
kmeansModel.fit = h2o.predict(object = kemansModel, newData = prostate.hex)
kmeansModel.fit = h2o.predict(object = kemansModel, newdata = prostate.hex)
kmeansModel.fit = h2o.predict(object = kmeansModel, newdata = prostate.hex)
summary(kmeansModel.fit)
str(kmeansModel.fit)
library(datasets)
library(lattice)
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
histogram(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
bwplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
stripplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
dotplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
splom(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
levelplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
counterplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
splom(~iris[1:4])
iris
~iris[1:4]
iris[1:4]
iris[1:2]
iris[1:4]
iris
airquality
splom(~airquality[1:4], Groups = Month, data=airquality)
splom(~airquality[1:4], groups = Month, data=airquality)
splom(~airquality[1:5], groups = Month, data=airquality)
xyplot(y~ x | f, panel = function(x,y,...) {
panel.xyplot(x,y,...)
panel.lmline(x,y,col = 2)
#unlike base functions where you annotate plots sequentially, you declare
# all the functions at once in lattice system
})
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x+f - f*x + rnorm(100, sd= 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y~ x | f, panel = function(x,y,...) {
panel.xyplot(x,y,...)
panel.lmline(x,y,col = 2)
#unlike base functions where you annotate plots sequentially, you declare
# all the functions at once in lattice system
})
?panel
??panel
splom(~airquality[1:5], groups = Month, data=airquality)
colnames(airquality)
require(geoR)
install.packages("geoR")
?geoR
library(geoR)
require(geoR)
data(elevation)
elevation
class(elevation)
str(elevation)
colnames(elevation)
colnames(elevation$x)
colnames(elevation[[1]])
colnames(elevation[[2]])
levelplot(Height ~ x*y, dat = elevation.fit)
elevation.fit = expand.grid(list(x = seq(10, 300, 1), y = seq(10, 300, 1)))
elevation.fit
?expand.grid
?
seq
levelplot(Height ~ x*y, data = elevation.fit,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data",
col.regions = terrain.colors(100)
)
x <- seq(pi/4, 5*pi, length.out=10)
y <- seq(pi/4, 5*pi, length.out=10)
grid <- expand.grid(X=x, Y=y)
grid$Z <- runif(100, -1, 1)
myPanel <- function(x, y, z, ...) {
panel.levelplot(x,y,z,...)
panel.text(x, y, round(z,1))
}
## Try it out
levelplot(Z ~ X*Y, grid, panel = myPanel)
grid
str(grid)
summary(grid)
install.packages("ggplot2")
str(mpg)
colnames(mpg$manufacturer)
qplot(displ, hwy, data = mpg)
library(ggplot2)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, col = dry, data = mpg)
qplot(displ, hwy, col = drv, data = mpg)
?qplot
aplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, col = drv, data = mpg)
qplot(x = hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(displ, hwy, data = mpg, facets = drv~)
qplot(displ, hwy, data = mpg, facets = drv~.)
data(maacs)
str(maacs)
str(mpg)
qplot(cyl, data = mpg, fill = model)
qplot(cyl, data = mpg, fill = fi)
qplot(cyl, data = mpg, fill = fl)
qplot(cyl, data = mpg, fill = fl, geom = "density")
?ggplot2
qplot(mpg, wt, data=mtcars, colour=cyl)
ot(mpg, wt, data=mtcars, size=cyl)
qplot(mpg, wt, data=mtcars, size=cyl)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(mpg, wt, data=mtcars, facets=vs ~ am)
str(mpg)
mpg$vs
mpg$am
qplot(mpg, wt, data=mtcars, facets= hwy ~ displ)
qplot(mpg, wt, data=mtcars, facets= fl ~ class)
qplot(mpg, wt, data=mpg, facets= fl ~ class)
qplot(cyl, year, data=mpg, facets= fl ~ class)
library(nlme)
BodyWeight
colnames(BodyWeight)
str(BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
qplot(cyl, data = mpg, fill = fl, geom = "density")
?geom
??geom
qplot(cyl, data = mpg, fill = fl, geom = "contour")
??geom
qplot(cyl, data = mpg, fill = fl, geom = "dotplot")
qplot(cyl, data = mpg, fill = fl, geom = "histogram")
qplot(cyl, year, data=mpg, facets= fl ~ class)
histogram(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
??panel
qplot(cyl, data = mpg, fill = fl, geom = "line")
qplot(cyl, data = mpg, fill = fl, geom = "line")
qplot(cyl, year, data=mpg, facets= fl ~ class)
qplot(cyl, year, data=mpg, facets= fl ~ class, geom = "bar")
qplot(cyl, year, data=mpg,geom = "density")
qplot(cyl, data = mpg, fill = fl, geom = "bar")
qplot(cyl, data = mpg, fill = fl, geom = "point")
qplot(cyl, data = mpg, fill = fl, geom = "jitter")
qplot(cyl, data = mpg, fill = fl, geom = "boxplot")
qplot(cyl, year, data = mpg, fill = fl, geom = "histogram")
qplot(cyl, year, data = mpg)
qplot(cyl, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, geom = "histogram")
qplot(displ, hwy, data = mpg, geom = "boxplot")
qplot(displ, hwy, data = mpg, geom = "density")
qplot(displ, hwy, data = mpg, fill = fl)
qplot(displ, hwy, data = mpg, size = fl)
qplot(displ, hwy, data = mpg, colour = fl)
qplot(cyl, data = mpg, colour = fl, geom = "histogram")
qplot(cyl, year, data=mpg, facets= fl ~ class)
qplot(displ, hwy, data = mpg, facets = drv~.)
qplot(displ, hwy, data = mpg, facets = drv~., colour = fl)
qplot(displ, hwy, data = mpg, facets = drv~., colour = fl)
splom(mtcars[c(1,3,4,5,6)],
main="MTCARS Data")
cloud(mpg~wt*qsec|cyl.f,
main="3D Scatterplot by Cylinders")
gear.f<-factor(gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
cyl.f <-factor(cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
library(lattice)
attach(mtcars)
gear.f<-factor(gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
cyl.f <-factor(cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
densityplot(~mpg,
main="Density Plot",
xlab="Miles per Gallon")
densityplot(~mpg|cyl.f,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
str(mtcars)
densityplot(~mpg|cyl.f, data = mtcars
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
densityplot(~mpg|cyl.f,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon", data = mtcars)
cloud(mpg~wt*qsec|cyl.f,
main="3D Scatterplot by Cylinders")
cloud(mpg~wt*qsec|cyl.f,
main="3D Scatterplot by Cylinders", data = mtcars)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
trellis.par.set()
?trellis.par.set()
?par
trellis.par.set()
?trellis.par.set()
?ggplot2.geom
??geom
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"= sample(11:15))
X <- X[sample(1:5),];
X$var2[c(1,3)] = NA
X
X[,1]
X[,1]
X[, "var1"]
X
X[(X$var1 <= 3 & X$var3 > 11), ]
X[(X$var1 <= 3 & X$var3 > 11), ]
X[which(X$var2>8),]
sort(X$var1)
sort(X$var2, na.last=TRUE)
library(plyr)
arrange(X, var1) # arrange by the value of var1
arrange(X, desc(var1))
X$var4 <- rnorm(5)
X
X <- cbind(X, rnorm(5))
X
fileURL <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileURL, destfile = "./Programming/Data Science/Getting and Cleaning Data/restaurants.csv", method = "curl")
data <- read.csv("./Programming/Data Science/Getting and Cleaning Data/restaurants.csv")
data
head(data)
tail(data)
str(data)
summary(data)
quantile(data$councilDistrict, na.rm= TRUE)
table(data$zipCode, useNA = "ifany")
table(data$councilDistrict, data$zipCode)
all(data$zipCode >0)
colSums(is.na(data))
colSums(is.na(data))
rowSums(is.na(data))
colSums(data$zipCode>0)
colSums(data== 0)
colSums(data < 0)
data[data$zipCode %in% c("21212", "21213"), ]
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
warpbreaks
xt <- xtabs(Freq ~ Gender + Admit, data = DF)
xt
ftable(xt)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL, destfile = "./Programming/Data Science/Getting and Cleaning Data", method = "curl")
data <- read.csv("./Programming/Data Science/Getting and Cleaning Data/hid.csv")
download.file(fileURL, destfile =
"./Programming/Data Science/Getting and Cleaning Data/hid.csv", method = "curl")
data <- read.csv("./Programming/Data Science/Getting and Cleaning Data/hid.csv")
data
colnames(data)
which(data$ACR ==3 & data$AGS == 6)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
file <- readJPEG(fileURL, native = TRUE)
?jpeg
??jpeg
install.packages("jpeg")
library(jpeg)
file <- readJPEG(fileURL, native = TRUE)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileURL, destfile =
"./Programming/Data Science/Getting and Cleaning Data/jeff.jpg", method = "curl")
file <- readJPEG("./Programming/Data Science/Getting and Cleaning Data/jeff.jpg", native = TRUE)
file
quantile(file, prob(0.3, 0.8))
quantile(file, probs = c(0.3, 0.8))
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install.packages("shiny")
library(shiny)
install.packages("yhat")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("yhat", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("XML", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("slidify", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("maps", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("gtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
getwd()
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
getwd()
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
gwtwd()
getwd()
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
library(h2o)
localH2O <- h2o.init(ip = "http://127.0.0.1", port = 54321, startH2O=TRUE)
a = matrix(c(1,2), nrow = 2, ncol = 1)
a
b = matrix(c(1,2), nrow = 1, ncol = 2)
b
a %*% b
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
list('a'=data.frame(c(1,2,3,4,5,6), nrows = 2, ncols = 3), 'b'=data.frame(c(1,2,3,4,5,6), nrows = 1))
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
getwd(())
getwd()
a<-"a"+"b"
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
as.integer("1")
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
shiny::runApp('Google Drive/MTS/MTS project')
# The application of the MTS
# the demo script for testing the MTS on the Liberty Mutual Peril Cost dataset
# Chang Hyun Lee
# created 2014.07.09
# set the working directory
setwd("./Google Drive/MTS/MTS project")
# import all the necessary modules
source("MTS.R")
# read the dataset
dataset <- read.csv("liberty_mutual.csv")
vw_normal <- read.csv("LM_Healthy_Labels_1.csv")
vw_normal <- vw_normal[, !(colnames(vw_normal) %in% c("X", "id"))]
vw_abnormal <- read.csv("LM_Sickbigger1_Labels_1.csv")
vw_abnormal <- vw_abnormal[, !(colnames(vw_abnormal) %in% c("X", "id"))]
# get the necessary subsets of the variables
columns <- colnames(vw_normal)
columns_except_target <- columns[!(columns %in% c("target"))]
vars <- columns_except_target[grep("var", columns_except_target)]
numeric_vars <- vars[-which(vars == "var7" | vars == "var8")]
geodem_vars <- columns_except_target[grep("geo", columns_except_target)]
weather_vars <- columns_except_target[grep("weather", columns_except_target)]
# normalize the dataset
vw_normal[, columns_except_target] <- normalize(vw_normal[, columns_except_target] , vw_normal[, columns_except_target] )
vw_abnormal[, columns_except_target] <- normalize(vw_normal[, columns_except_target], vw_abnormal[, columns_except_target])
# variables to test upon
vars_to_test <- append(append(numeric_vars,geodem_vars), weather_vars)
# read the orthogonal array file
orthoarray_filename <- "L256.csv"
# test the dataset on the MTS
MTS(vw_normal[, vars_to_test], vw_abnormal[, vars_to_test], orthoarray_filename)
vw_normal <- read.csv("LM_Healthy_Labels_1.csv")
vw_normal <- vw_normal[, !(colnames(vw_normal) %in% c("X", "id"))]
vw_abnormal <- read.csv("LM_Sickbigger1_Labels_1.csv")
vw_abnormal <- vw_abnormal[, !(colnames(vw_abnormal) %in% c("X", "id"))]
setwd("./Google Drive/MTS/MTS project")
getwd()
source("MTS.R")
dataset <- read.csv("liberty_mutual.csv")
vw_normal <- dataset[dataset$target ==0, ]
vw_abnorma <- dataset[dataset$target ==1, ]
vw_normal <- vw_normal[, !(colnames(vw_normal) %in% c("X", "id"))]
vw_abnormal <- vw_abnormal[, !(colnames(vw_abnormal) %in% c("X", "id"))]
dataset <- read.csv("liberty_mutual.csv")
vw_normal <- dataset[dataset$target ==0, ]
vw_abnormal <- dataset[dataset$target ==1, ]
vw_normal <- vw_normal[, !(colnames(vw_normal) %in% c("X", "id"))]
vw_abnormal <- vw_abnormal[, !(colnames(vw_abnormal) %in% c("X", "id"))]
columns <- colnames(vw_normal)
columns_except_target <- columns[!(columns %in% c("target"))]
vars <- columns_except_target[grep("var", columns_except_target)]
numeric_vars <- vars[-which(vars == "var7" | vars == "var8")]
geodem_vars <- columns_except_target[grep("geo", columns_except_target)]
weather_vars <- columns_except_target[grep("weather", columns_except_target)]
# normalize the dataset
vw_normal[, columns_except_target] <- normalize(vw_normal[, columns_except_target] , vw_normal[, columns_except_target] )
vw_abnormal[, columns_except_target] <- normalize(vw_normal[, columns_except_target], vw_abnormal[, columns_except_target])
# variables to test upon
vars_to_test <- append(append(numeric_vars,geodem_vars), weather_vars)
# read the orthogonal array file
orthoarray_filename <- "L256.csv"
dim(vm_normal)
dim(vw_normal)
dim(vw_abnormal)
head(vw_normal)
vw_abnormal[, columns_except_target] <- normalize(vw_normal[, columns_except_target], vw_abnormal[, columns_except_target])
dim(vw_abnorma)
dim(vw_abnormal)
head(dataset$target)
dataset$target
